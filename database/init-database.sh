#!/bin/bash

# ============================================
# Script d'initialisation de la base de donn√©es PostgreSQL
# ============================================

echo "üöÄ Initialisation de la base de donn√©es GRC Compliance..."

# Configuration
DB_NAME="grc_compliance"
DB_USER="postgres"
DB_HOST="localhost"
DB_PORT="5432"

# Couleurs pour les messages
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${YELLOW}‚ÑπÔ∏è  $1${NC}"
}

# V√©rifier si PostgreSQL est install√©
if ! command -v psql &> /dev/null; then
    print_error "PostgreSQL n'est pas install√© ou n'est pas dans le PATH"
    exit 1
fi

print_success "PostgreSQL d√©tect√©: $(psql --version)"

# V√©rifier si la base de donn√©es existe d√©j√†
DB_EXISTS=$(psql -U $DB_USER -h $DB_HOST -p $DB_PORT -lqt | cut -d \| -f 1 | grep -w $DB_NAME | wc -l)

if [ $DB_EXISTS -eq 1 ]; then
    print_info "La base de donn√©es '$DB_NAME' existe d√©j√†"
    read -p "Voulez-vous la supprimer et la recr√©er? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        print_info "Suppression de la base de donn√©es existante..."
        dropdb -U $DB_USER -h $DB_HOST -p $DB_PORT $DB_NAME
        print_success "Base de donn√©es supprim√©e"
    else
        print_info "Utilisation de la base de donn√©es existante"
    fi
fi

# Cr√©er la base de donn√©es si elle n'existe pas
if [ $DB_EXISTS -eq 0 ] || [[ $REPLY =~ ^[Yy]$ ]]; then
    print_info "Cr√©ation de la base de donn√©es '$DB_NAME'..."
    createdb -U $DB_USER -h $DB_HOST -p $DB_PORT $DB_NAME
    
    if [ $? -eq 0 ]; then
        print_success "Base de donn√©es '$DB_NAME' cr√©√©e"
    else
        print_error "Erreur lors de la cr√©ation de la base de donn√©es"
        exit 1
    fi
fi

# Ex√©cuter le sch√©ma SQL
print_info "Ex√©cution du sch√©ma SQL..."
psql -U $DB_USER -h $DB_HOST -p $DB_PORT -d $DB_NAME -f database/schema.sql

if [ $? -eq 0 ]; then
    print_success "Sch√©ma SQL ex√©cut√© avec succ√®s"
else
    print_error "Erreur lors de l'ex√©cution du sch√©ma SQL"
    exit 1
fi

# Afficher les tables cr√©√©es
print_info "Tables cr√©√©es:"
psql -U $DB_USER -h $DB_HOST -p $DB_PORT -d $DB_NAME -c "\dt"

# Afficher les vues cr√©√©es
print_info "Vues cr√©√©es:"
psql -U $DB_USER -h $DB_HOST -p $DB_PORT -d $DB_NAME -c "\dv"

# Cr√©er le fichier .env.local avec les informations de connexion
print_info "Cr√©ation du fichier de configuration..."

# Lire le contenu existant de .env.local
if [ -f .env.local ]; then
    # V√©rifier si DATABASE_URL existe d√©j√†
    if grep -q "DATABASE_URL" .env.local; then
        print_info "DATABASE_URL existe d√©j√† dans .env.local"
    else
        # Ajouter DATABASE_URL
        echo "" >> .env.local
        echo "# PostgreSQL Database" >> .env.local
        echo "DATABASE_URL=postgresql://$DB_USER@$DB_HOST:$DB_PORT/$DB_NAME" >> .env.local
        print_success "DATABASE_URL ajout√© √† .env.local"
    fi
else
    print_error ".env.local n'existe pas"
fi

# R√©sum√©
echo ""
print_success "============================================"
print_success "Base de donn√©es initialis√©e avec succ√®s!"
print_success "============================================"
echo ""
print_info "Informations de connexion:"
echo "  Base de donn√©es: $DB_NAME"
echo "  Utilisateur: $DB_USER"
echo "  H√¥te: $DB_HOST"
echo "  Port: $DB_PORT"
echo ""
print_info "Cha√Æne de connexion:"
echo "  postgresql://$DB_USER@$DB_HOST:$DB_PORT/$DB_NAME"
echo ""
print_info "Prochaines √©tapes:"
echo "  1. Installer les d√©pendances: npm install pg prisma"
echo "  2. Importer les donn√©es SCF: npm run import:scf"
echo "  3. Lancer l'application: npm run dev"
echo ""

