services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: grc_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-grc_compliance}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - grc_network

  # Backend Python FastAPI + ML
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: grc_backend
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-grc_compliance}
      PYTHONUNBUFFERED: 1
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    volumes:
      - ml_cache:/app/cache
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - grc_network

  # Frontend React + Nginx
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
        CLAUDE_API_KEY: ${CLAUDE_API_KEY:-}
        GEMINI_API_KEY: ${GEMINI_API_KEY:-}
        VITE_API_URL: ${VITE_API_URL:-http://localhost:8001}
    container_name: grc_frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3001}:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - grc_network

volumes:
  postgres_data:
    driver: local
  ml_cache:
    driver: local

networks:
  grc_network:
    driver: bridge
