#!/usr/bin/env python3
"""
Script de pr√©-calcul des embeddings SCF
Utilise le meilleur mod√®le d'embedding multilingue pour garantir des r√©sultats infaillibles
"""

import sys
from loguru import logger
from sentence_transformers import SentenceTransformer
from scf_knowledge_service import SCFKnowledgeBase
import time

# Configuration du logger
logger.remove()
logger.add(sys.stdout, format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | {message}")

def main():
    """Pr√©-calcule et met en cache les embeddings SCF"""

    logger.info("=" * 80)
    logger.info("üöÄ PR√â-CALCUL DES EMBEDDINGS SCF")
    logger.info("=" * 80)

    # √âtape 1: Charger le mod√®le d'embedding premium
    logger.info("")
    logger.info("üì• √âTAPE 1/4: Chargement du mod√®le d'embedding...")
    logger.info("   Mod√®le: BAAI/bge-m3 (meilleur mod√®le multilingue)")

    start_time = time.time()

    try:
        model = SentenceTransformer('BAAI/bge-m3')
        logger.success(f"‚úÖ Mod√®le charg√© en {time.time() - start_time:.1f}s")
        logger.info(f"   Dimensions: 1024")
        logger.info(f"   Type: Multilingue (FR/EN)")
    except Exception as e:
        logger.error(f"‚ùå Erreur chargement mod√®le: {e}")
        logger.info("   Fallback sur paraphrase-multilingual-mpnet-base-v2...")
        model = SentenceTransformer('paraphrase-multilingual-mpnet-base-v2')
        logger.warning("‚ö†Ô∏è  Utilisation du mod√®le fallback (moins pr√©cis)")

    # √âtape 2: Charger la base SCF
    logger.info("")
    logger.info("üìö √âTAPE 2/4: Chargement de la base de connaissances SCF...")

    try:
        scf_kb = SCFKnowledgeBase(
            excel_path='/app/scf_knowledge_base.xlsx',
            cache_dir='/app/cache'
        )
        logger.success(f"‚úÖ Base SCF charg√©e:")
        logger.info(f"   ‚Ä¢ {len(scf_kb.controls)} contr√¥les SCF")
        logger.info(f"   ‚Ä¢ {len(scf_kb.threats)} menaces")
        logger.info(f"   ‚Ä¢ {len(scf_kb.risks)} risques")
    except Exception as e:
        logger.error(f"‚ùå Erreur chargement base SCF: {e}")
        sys.exit(1)

    # √âtape 3: Calculer les embeddings avec progression
    logger.info("")
    logger.info("üßÆ √âTAPE 3/4: Calcul des embeddings s√©mantiques...")
    logger.info(f"   Traitement de {len(scf_kb.controls)} contr√¥les par batch de 32...")
    logger.info("   ‚è≥ Ceci peut prendre plusieurs minutes...")
    logger.info("")

    embed_start = time.time()

    try:
        # Cette fonction g√®re automatiquement le cache
        scf_kb.init_semantic_model(model)

        embed_time = time.time() - embed_start
        logger.success(f"‚úÖ Embeddings calcul√©s en {embed_time/60:.1f} minutes")

    except Exception as e:
        logger.error(f"‚ùå Erreur calcul embeddings: {e}")
        import traceback
        logger.error(traceback.format_exc())
        sys.exit(1)

    # √âtape 4: V√©rification du cache
    logger.info("")
    logger.info("üîç √âTAPE 4/4: V√©rification du cache...")

    import os
    cache_files = os.listdir('/app/cache')
    if cache_files:
        for cache_file in cache_files:
            cache_path = f'/app/cache/{cache_file}'
            size_mb = os.path.getsize(cache_path) / (1024 * 1024)
            logger.success(f"   ‚úì {cache_file} ({size_mb:.1f} MB)")
    else:
        logger.warning("   ‚ö†Ô∏è  Aucun fichier cache trouv√©")

    # √âtape 5: Test de recherche
    logger.info("")
    logger.info("üß™ TEST DE VALIDATION...")

    test_requirement = "Les mots de passe doivent √™tre complexes et chang√©s r√©guli√®rement"
    logger.info(f'   Recherche pour: "{test_requirement}"')

    try:
        results = scf_kb.find_best_scf_control(test_requirement, top_k=3)

        logger.success(f"   ‚úì Trouv√© {len(results)} contr√¥les pertinents:")
        for i, result in enumerate(results, 1):
            logger.info(f"      {i}. {result['scf_id']} - {result['scf_control']}")
            logger.info(f"         Similarit√©: {result['similarity_score']*100:.1f}%")
    except Exception as e:
        logger.error(f"   ‚úó Erreur test: {e}")

    # R√©sum√© final
    total_time = time.time() - start_time
    logger.info("")
    logger.info("=" * 80)
    logger.success("üéâ PR√â-CALCUL TERMIN√â AVEC SUCC√àS!")
    logger.info("=" * 80)
    logger.info(f"‚è±Ô∏è  Temps total: {total_time/60:.1f} minutes")
    logger.info(f"üíæ Cache cr√©√©: /app/cache/")
    logger.info(f"üöÄ Prochains d√©marrages: <3 secondes (chargement depuis cache)")
    logger.info("")
    logger.info("üìù PROCHAINES √âTAPES:")
    logger.info("   1. Le backend utilisera automatiquement le cache")
    logger.info("   2. Les agents auront des r√©sultats infaillibles")
    logger.info("   3. Recherche s√©mantique ultra-pr√©cise activ√©e")
    logger.info("")
    logger.success("‚úÖ Vous pouvez maintenant utiliser l'application!")
    logger.info("=" * 80)

if __name__ == "__main__":
    main()
